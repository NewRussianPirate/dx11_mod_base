
#include "VergilTrickUpLockedOn.hpp"
#include "PlayerTracker.hpp"
uintptr_t VergilTrickUpLockedOn::jmp_ret1{NULL};
uintptr_t VergilTrickUpLockedOn::jmp_jne1{NULL};

uintptr_t VergilTrickUpLockedOn::jmp_ret2{NULL};
uintptr_t VergilTrickUpLockedOn::jmp_jne2{NULL};

uintptr_t VergilTrickUpLockedOn::jmp_ret3{NULL};
uintptr_t VergilTrickUpLockedOn::jmp_je3{NULL};

bool VergilTrickUpLockedOn::cheaton{NULL};
bool leftstickpushed{0};

// clang-format off
// only in clang/icl mode on x64, sorry

static naked void detour1() { // Disable Trick To
	__asm {
        cmp byte ptr [PlayerTracker::playerid], 4 //change this to the char number obviously
        jne code
        cmp byte ptr [VergilTrickUpLockedOn::cheaton], 1
        je cheatcode
        jmp code

    cheatcode:
		jmp qword ptr [VergilTrickUpLockedOn::jmp_ret1]

    code:
        cmp [rdx+00000ED0h], sil
        jne jnejmp
        jmp qword ptr [VergilTrickUpLockedOn::jmp_ret1]

    jnejmp:
        jmp qword ptr [VergilTrickUpLockedOn::jmp_jne1]
	}
}

static naked void detour2() { // Enable Trick Up While Locked On
	__asm {
        cmp byte ptr [VergilTrickUpLockedOn::cheaton], 1
        je cheatcode
        jmp code

    code:
        cmp byte ptr [rdx+00000ED0h], 00
        jne jnejmp
        jmp qword ptr [VergilTrickUpLockedOn::jmp_ret2]

    cheatcode:
		jmp qword ptr [VergilTrickUpLockedOn::jmp_ret2]

    jnejmp:
        jmp qword ptr [VergilTrickUpLockedOn::jmp_jne2]
	}
}

static naked void detour3() { // Disable Directional Dodges
	__asm {
        cmp byte ptr [VergilTrickUpLockedOn::cheaton], 1
        je cheatcode
        jmp code

    code:
        test al, al
        je jejmp
        jmp qword ptr [VergilTrickUpLockedOn::jmp_ret3]

    cheatcode:
		jmp qword ptr [VergilTrickUpLockedOn::jmp_je3]

    jejmp:
        jmp qword ptr [VergilTrickUpLockedOn::jmp_je3]
	}
}

// clang-format on

std::optional<std::string> VergilTrickUpLockedOn::on_initialize() {
  ischecked            = &VergilTrickUpLockedOn::cheaton;
  onpage               = vergilpage;

  full_name_string     = "Trick Up On Forward + Trick";
  author_string        = "SSSiyan";
  description_string   = "Trick Up without letting go of Lock On.";

  auto base = g_framework->get_module().as<HMODULE>(); // note HMODULE
  auto addr1 = utility::scan(base, "40 38 B2 D0 0E 00 00 75");
  if (!addr1) {
    return "Unable to find VergilTrickUpLockedOn pattern1.";
  }
  VergilTrickUpLockedOn::jmp_jne1 = addr1.value() + 69;

  auto addr2 = utility::scan(base, "80 BA D0 0E 00 00 00 0F 85 86");
  if (!addr2) {
    return "Unable to find VergilTrickUpLockedOn pattern2.";
  }
  VergilTrickUpLockedOn::jmp_jne2 = addr2.value() + 147;
  
  auto addr3 = utility::scan(base, "84 C0 0F 84 E7 02 00 006");
  if (!addr3) {
    return "Unable to find VergilTrickUpLockedOn pattern3.";
  }
  VergilTrickUpLockedOn::jmp_je3 = addr3.value() + 751;

  if (!install_hook_absolute(addr1.value(), m_function_hook1, &detour1, &jmp_ret1, 9)) {
    //  return a error string in case something goes wrong
    spdlog::error("[{}] failed to initialize", get_name());
    return "Failed to initialize VergilTrickUpLockedOn1";
  }
  if (!install_hook_absolute(addr2.value(), m_function_hook2, &detour2, &jmp_ret2, 13)) {
    //  return a error string in case something goes wrong
    spdlog::error("[{}] failed to initialize", get_name());
    return "Failed to initialize VergilTrickUpLockedOn2";
  }
  if (!install_hook_absolute(addr3.value(), m_function_hook3, &detour3, &jmp_ret3, 8)) {
    //  return a error string in case something goes wrong
    spdlog::error("[{}] failed to initialize", get_name());
    return "Failed to initialize VergilTrickUpLockedOn3";
  }
  return Mod::on_initialize();
}

void VergilTrickUpLockedOn::on_draw_ui() {}
